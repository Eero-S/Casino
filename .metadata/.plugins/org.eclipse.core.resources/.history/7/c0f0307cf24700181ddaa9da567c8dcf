package kasinoPackage
import scala.collection.mutable.Buffer
import scala.io.StdIn._
import scala.collection.mutable.Queue

object Game {

  var turn = Queue[Player]()
  var lastTaken: Player = null
  var deck: Buffer[Card] = Buffer()
  val board = new Board(Buffer())
  val players: Buffer[Player] = Buffer()

  // Creates the desired deck, thats suits the rules of the game. Also shuffles, and fills the board.
  def createDeck = {
    this.board.cards.clear()
    deck.clear()
    val ranks = Vector("A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K")
    for (i <- 1 to 4) {
      if (i == 1) {
        deck += new Card(14, i, "Diamonds", ranks(i - 1), 1, i + 12)
        deck += new Card(14, i, "Hearts", ranks(i - 1), 1, i + 25)
        deck += new Card(14, i, "Clubs", ranks(i - 1), 1, i - 1)
        deck += new Card(14, i, "Spades", ranks(i - 1), 1, i + 38)
      } else if (i == 2) {
        deck += new Card(i, i, "Diamonds", ranks(i - 1), 0, i + 12)
        deck += new Card(i, i, "Hearts", ranks(i - 1), 0, i + 25)
        deck += new Card(i, i, "Clubs", ranks(i - 1), 0, i - 1)
        deck += new Card(15, i, "Spades", ranks(i - 1), 1, i + 38)
      } else if (i == 10) {
        deck += new Card(16, i, "Diamonds", ranks(i - 1), 2, i + 12)
        deck += new Card(i, i, "Hearts", ranks(i - 1), 0, i + 25)
        deck += new Card(i, i, "Clubs", ranks(i - 1), 0, i - 1)
        deck += new Card(i, i, "Spades", ranks(i - 1), 0, i + 38)
      } else {
        deck += new Card(i, i, "Diamonds", ranks(i - 1), 0, i + 12)
        deck += new Card(i, i, "Hearts", ranks(i - 1), 0, i + 25)
        deck += new Card(i, i, "Clubs", ranks(i - 1), 0, i - 1)
        deck += new Card(i, i, "Spades", ranks(i - 1), 0, i + 38)
      }
    }
    this.shuffle()
    this.fillBoard()
  }

  def gameOver: Boolean = this.players.exists(_.points >= 16)
  def roundOver: Boolean = this.players.forall(_.hand.isEmpty)
  def winner: Player = this.players.maxBy(_.points)

  // Creates n amount of players, also asking the names of each player.
  def createPlayers(n: Int, names: Seq[String]) = {
    require(names.size == n && n > 0, "createPlayers failed")
    for (i <- 0 until n) {
      players += new Player(Buffer(), board, names(i))
    }
    fillHands()
    turn ++= players
    this.lastTaken = this.players.head
  }
  
  // Doesn't work without players.
  def createBot(n: Int): Unit = {
    val bots = Buffer[Player]()
    for(i <- 0 until n){
      bots += new AI(Buffer(), board, "bot"+i)      
    }
    players ++= bots
    turn ++= bots
  }

  def roundFinish() = {
    this.lastTaken.collect(this.board.cards) // TODO problems...
    this.addPoints()
    this.resetRound()

  }

  def gameHandler(): Unit = {  
      println(Game.deck.size)
      this.fillHands()
      this.rotateQueue()  
      if(this.turn.head.isBot && !this.roundOver){
        this.turn.head.play
        this.gameHandler()
      }
  }

  // The dealing method - fills the hand of every player.
  private def fillHands(): Unit = {
    while (players.exists(_.hand.length < 4) && deck.size > 0) {
      for (i <- 0 until players.length) {
        if (players(i).hand.length < 4 && deck.size > 0) {
          players(i).hand += deck.head
          deck.remove(0, 1)
        }
      }
    }
  }

  // Adds points to players.
  private def addPoints() = {
    this.players.maxBy(_.calcSpades).winSpades
    this.players.maxBy(_.calcLength).winSize
    this.players.foreach(_.addPointCards)
  }

   def resetGame(): Unit = {
    this.players.foreach(_.resetAll)
    this.createDeck
    this.fillHands()
  }
  
  // Resets everything for the next round.
  private def resetRound(): Unit = {
    this.players.foreach(_.resetRound)
    this.createDeck
    this.fillHands()
    this.rotateQueue() // Rotate first to last, as new round begins.
  }

  private def rotateQueue(): Unit = {
    this.turn += this.turn.dequeue()
  }

  private def shuffle(): Unit = {
    deck = scala.util.Random.shuffle(deck)
  }

  private def fillBoard(): Unit = {
    val boardSize = 4
    while (board.cards.size < boardSize) {
      board.cards += deck.head
      deck.remove(0, 1)
    }
  }

}

