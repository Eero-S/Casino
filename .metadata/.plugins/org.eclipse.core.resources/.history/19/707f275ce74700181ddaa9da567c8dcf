package kasinoPackage
import scala.collection.mutable.Buffer

class AI(hand: Buffer[Card], board: Board, name: String) extends Player(hand, board, name) {

  def bestValue = {    
    var options = Map[Card, Option[Set[Card]]]()
    // Assign best outcome for each card in hand.
    for (i <- hand.indices) {
      val bestToTake = bestValueHelper(hand(i))
      options = options ++ Map(hand(i) -> bestToTake)
    }
    // Get the best card to play.
    val nonesFiltered = options.filter(!_._2.isEmpty)
    if(nonesFiltered.isEmpty){
      
    } else {
    val aa = nonesFiltered.mapValues(_.get)
    val b = aa.maxBy(_._2.map(_.points).sum)._1
    b
    }
  }
  // Helps to assemble results.
  def bestValueHelper(card: Card): Option[Set[Card]] = {
    val possibleSets = inspectSets(card)
    if (possibleSets.isEmpty) {
      None
    } else {
      val sets = possibleSets.get
      val cardsInSets = sets.flatten.toSet
      val r = bestFromSets(cardsInSets, card.valueHand, Set())
      Some(r)
    }
  }
  // Returns the set with best value.
  def bestFromSets(cards: Set[Card], targ: Int, currentSet: Set[Card]): Set[Card] = {
    val subs = cards.subsets().toList.map(_.toSeq).filter(_.map(_.valueTable).sum == targ).distinct
    if (subs.isEmpty) {
      currentSet
    } else {
      var old = currentSet
      for (i <- subs.indices) {
        val eka = subs(i).toSet
        val uudet = cards -- eka
        val n = bestFromSets(uudet, targ, currentSet ++ eka)
        val pointsOld = old.map(_.points).sum
        val pointsNew = n.map(_.points).sum
        val oldLength = old.size
        val newLength = n.size
        val oldSpades = old.map(_.suit == "Spades").size
        val newSpades = n.map(_.suit == "Spades").size
        if (pointsNew > pointsOld) {
          old = n
        } else if (pointsNew == pointsOld) {
          if (newLength > oldLength || newSpades > oldSpades) {
            old = n
          }
        }
      }
      old
    }
  }

}